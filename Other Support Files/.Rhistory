time = as.numeric(),
p = as.integer()
)
# start simulating
for (s in c(1:n_sim)) {
for (c in c(1:daily_app)) {
nr <- sample(newreturn_proportions, 1)
f <- sample(followup_proportions, 1)
sim_nr <- add_row(
sim_nr,
sim_nr = s,
appID = 0,
time = workday[c],
p = nr
)
sim_f <- add_row(
sim_nr,
sim_nr = s,
appID = 0,
time = workday[c],
p = f
)
}
}
sim_f <- tibble(
sim = as.numeric(),
appID = as.numeric(),
time = as.numeric(),
p = as.integer()
)
# start simulating
for (s in c(1:n_sim)) {
for (c in c(1:daily_app)) {
nr <- sample(newreturn_proportions, 1)
f <- sample(followup_proportions, 1)
sim_nr <- add_row(
sim_nr = s,
appID = 0,
time = workday[c],
p = nr
)
sim_f <- add_row(
sim_nr = s,
appID = 0,
time = workday[c],
p = f
)
}
}
# create tibbles to store simulated schedules
sim_nr <- tibble(
sim = as.numeric(),
appID = as.numeric(),
time = as.numeric(),
p = as.integer()
)
sim_f <- tibble(
sim = as.numeric(),
appID = as.numeric(),
time = as.numeric(),
p = as.integer()
)
# start simulating
for (s in c(1:n_sim)) {
for (c in c(1:daily_app)) {
nr <- sample(newreturn_proportions, 1)
f <- sample(followup_proportions, 1)
sim_nr <- add_row(
sim_nr,
sim = s,
appID = 0,
time = workday[c],
p = nr
)
sim_f <- add_row(
sim_f,
sim = s,
appID = 0,
time = workday[c],
p = f
)
}
}
# filter out not utilized appointments
sim_nr <- sim_nr %>% filter(!p == 0)
sim_f <- sim_f %>%  filter(!p == 0)
View(sim_f)
View(sim_f)
# combine follow up and new return
sims <- bind_rows(sim_nr, sim_f) %>%
arrange(sim, time)
sims
View(sims)
# combine follow up and new return
sims <- bind_rows(sim_nr, sim_f) %>%
arrange(sim, time) %>%
group_by(sim) %>%
mutate(appID = row_number())
df_long <- df_long %>%
left_join(., sims, by = c("sim", "appID"))
View(df_long)
df_long <- tibble(
sim = as.integer(),
appID = as.integer()
)
for (s in c(1:n_sim)) {
for (c in c(1:n_cols)) {
df_long <- add_row(
df_long,
sim = s,
appID = c
)
}
}
df_long <- df_long %>%
left_join(., sims, by = c("sim", "appID"))
n_new <- daily_app * p_new
# define appointment utilization
daily_app <- 28
p_new <- 0.3
p_return <- 0.4
p_fu <- 0.3
n_new <- daily_app * p_new
n_new
n_return <- daily_app * p_return
n_return
n_fu <- daily_app * p_fu
n_fu
# define appointment utilization
daily_app <- 28
util <- 28
no_app <- daily_app - util
p_new <- 0.3
p_return <- 0.4
p_fu <- 0.3
n_new <- daily_app * p_new
n_return <- daily_app * p_return
n_fu <- daily_app * p_fu
no_seq <- seq(0, no_app)
no_seq
no_app
sub <- c(1,2,3)
new_seq <- seq(1, n_new)
new_seq
no_seq <- rep(0, no_app)
new_seq <- rep(1, n_new)
new_seq
return_seq <- rep(2, n_return)
fu_seq <- rep(3, n_fu)
?round
n_new <- round(util * p_new)
n_return <- round(util * p_return)
n_fu <- round(util * p_fu)
n_new <- round(util * p_new)
n_return <- round(util * p_return)
n_fu <- round(util * p_fu)
if (util > n_new + n_return + n_fu) {
n_sub <- util - (n_new + n_return + n_fu)
} else {
n_sub <- 0
}
no_seq <- rep(0, no_app)
new_seq <- rep(1, n_new)
return_seq <- rep(2, n_return)
fu_seq <- rep(3, n_fu)
sub <- c(1,2,3)
full_seq <- c(no_seq, new_seq, return_seq, fu_seq, sub_seq)
sub_seq <- sample(sub, n_sub)
full_seq <- c(no_seq, new_seq, return_seq, fu_seq, sub_seq)
sull_shuff <- sample(full_seq, util)
sull_shuff
p_new <- 3/7
p_return <- 4/7
nr_seq <- rep(0, util)
fu_seq <- rep(0, util)
nr_seq
nr_seq <- c(rep(1, n_new), rep(2, n_return), rep(0, util))[1:util]
nr_seq
p_new <- 3/7
p_return <- 4/7
n_new <- round(util * p_new)
n_return <- round(util * p_return)
nr_seq <- c(rep(1, n_new), rep(2, n_return), rep(0, util))[1:util]
nr_seq
n_new
n_return
nr_sub <- ifelse(util > n_new + n_return, sample(sub, util - (n_new + n_return)))
nr_sub <- ifelse(util > n_new + n_return, sample(sub, util - (n_new + n_return)), c())
nr_sub
nr_sub <- ifelse(util > n_new + n_return, sample(sub, util - (n_new + n_return)), NA)
nr_sub <- ifelse(util > n_new + n_return, sample(sub, util - (n_new + n_return)), NA)
nr_seq <- sample(c(rep(1, n_new), rep(2, n_return), nr_sub, rep(0, util))[1:util], util)
nr_seq
fu_seq <- sample(c(rep(3, n_fu), rep(0, util - n_fu))[1:util], util)
fu_seq
nr_seq <- sample(c(rep(1, n_new), rep(2, n_return), nr_sub, rep(0, util))[1:util], util)
fu_seq <- sample(c(rep(3, n_fu), rep(0, util - n_fu))[1:util], util)
nr_seq
fu_seq
# start simulating
set.seed(123)
for (s in c(1:n_sim)) {
# new and return can not be scheduled on the same time together, but followup can be (with new or return)
# create a sequence for new and return, one for follow up
# create a substitute sequence in case rounding leads to fewer than no of appointments
# appiontment slots not utilized will be filled with 0s
# shuffle the sequences for each simulation newly
nr_sub <- ifelse(util > n_new + n_return, sample(sub, util - (n_new + n_return)), NA)
nr_seq <- sample(c(rep(1, n_new), rep(2, n_return), nr_sub, rep(0, daily_app))[1:daily_app], daily_app)
fu_seq <- sample(c(rep(3, n_fu), rep(0, daily_app - n_fu))[1:daily_app], daily_app)
# for each appointment time, populate the dataframe with randomly drawn schedules
for (c in c(1:daily_app)) {
# populate new and return dataframe
sim_nr <- add_row(
sim_nr,
sim = s,
appID = 0,
time = workday[c],
p = nr_seq[c]
)
# populate followup dataframe
sim_f <- add_row(
sim_f,
sim = s,
appID = 0,
time = workday[c],
p = fu_seq[c]
)
}
}
library(tidyverse)
# Create an empty dataframe with 42 rows per day or simulation
n_cols <- 42
n_sim <- 100
df_long <- tibble(
sim = as.integer(),
appID = as.integer()
)
for (s in c(1:n_sim)) {
for (c in c(1:n_cols)) {
df_long <- add_row(
df_long,
sim = s,
appID = c
)
}
}
# define appointment utilization and set proportions for patient types correctly
daily_app <- 28
util <- 28
no_app <- daily_app - util
p_new <- 3/7
p_return <- 4/7
p_fu <- p_new
sub <- c(1,2,3)
# with the proportions, calculate number of each patient type, rounded
n_new <- round(util * p_new)
n_return <- round(util * p_return)
n_fu <- round(util * p_fu)
# create tibbles to store simulated schedules
sim_nr <- tibble(
sim = as.numeric(),
appID = as.numeric(),
time = as.numeric(),
p = as.integer()
)
sim_f <- tibble(
sim = as.numeric(),
appID = as.numeric(),
time = as.numeric(),
p = as.integer()
)
# start simulating
set.seed(123)
for (s in c(1:n_sim)) {
# new and return can not be scheduled on the same time together, but followup can be (with new or return)
# create a sequence for new and return, one for follow up
# create a substitute sequence in case rounding leads to fewer than no of appointments
# appiontment slots not utilized will be filled with 0s
# shuffle the sequences for each simulation newly
nr_sub <- ifelse(util > n_new + n_return, sample(sub, util - (n_new + n_return)), NA)
nr_seq <- sample(c(rep(1, n_new), rep(2, n_return), nr_sub, rep(0, daily_app))[1:daily_app], daily_app)
fu_seq <- sample(c(rep(3, n_fu), rep(0, daily_app - n_fu))[1:daily_app], daily_app)
# for each appointment time, populate the dataframe with randomly drawn schedules
for (c in c(1:daily_app)) {
# populate new and return dataframe
sim_nr <- add_row(
sim_nr,
sim = s,
appID = 0,
time = workday[c],
p = nr_seq[c]
)
# populate followup dataframe
sim_f <- add_row(
sim_f,
sim = s,
appID = 0,
time = workday[c],
p = fu_seq[c]
)
}
}
shift1 <- seq(from = 8, to = 11.25, by = 0.25)
shift2 <- seq(from = 12, to = 15.25, by = 0.25)
workday <- c(shift1, shift2)
for (s in c(1:n_sim)) {
# new and return can not be scheduled on the same time together, but followup can be (with new or return)
# create a sequence for new and return, one for follow up
# create a substitute sequence in case rounding leads to fewer than no of appointments
# appiontment slots not utilized will be filled with 0s
# shuffle the sequences for each simulation newly
nr_sub <- ifelse(util > n_new + n_return, sample(sub, util - (n_new + n_return)), NA)
nr_seq <- sample(c(rep(1, n_new), rep(2, n_return), nr_sub, rep(0, daily_app))[1:daily_app], daily_app)
fu_seq <- sample(c(rep(3, n_fu), rep(0, daily_app - n_fu))[1:daily_app], daily_app)
# for each appointment time, populate the dataframe with randomly drawn schedules
for (c in c(1:daily_app)) {
# populate new and return dataframe
sim_nr <- add_row(
sim_nr,
sim = s,
appID = 0,
time = workday[c],
p = nr_seq[c]
)
# populate followup dataframe
sim_f <- add_row(
sim_f,
sim = s,
appID = 0,
time = workday[c],
p = fu_seq[c]
)
}
}
# filter out not utilized appointments
sim_nr <- sim_nr %>% filter(!p == 0)
sim_f <- sim_f %>%  filter(!p == 0)
# combine follow up and new return
sims <- bind_rows(sim_nr, sim_f) %>%
arrange(sim, time) %>%
group_by(sim) %>%
mutate(appID = row_number())
# join the template dataframe
# because all days must have same number of rows (42) to pivot the data later
# to make it suitable for how we want to import it in JaamSim
df_long <- df_long %>%
left_join(., sims, by = c("sim", "appID"))
"A" + c(1:42)
c(1:42)
df_long[is.na(df_long)] <- 0
df_long %>%
pivot_wider(names_from = appID, values_from = p)
df_long %>%
select(sim, appID, p) %>%
pivot_wider(names_from = appID, values_from = p)
df_long %>%
select(sim, time, p) %>%
pivot_wider(names_from = appID, values_from = p)
df_long %>%
select(sim, appID, time) %>%
pivot_wider(names_from = time, values_from = time)
df_long %>%
select(sim, appID, time) %>%
pivot_wider(names_from = appID, values_from = time)
seq(from = 1, to = 42, by = 1)
paste(seq(from = 1, to = 42, by = 1), collapse = "")
paste(seq(from = 1, to = 42, by = 1), collapse = " ")
# pivot wider for patient, need wider format for input in jaamsim
InputPatients <- df_long %>%
select(sim, appID, p) %>%
pivot_wider(names_from = appID, values_from = p)
# pivot wider for time, need wider format for input in jaamsim
InputSchedule <- df_long %>%
select(sim, appID, time) %>%
pivot_wider(names_from = appID, values_from = time)
library(readxl)
library(writexl)
# save simulations
write_xlsx(InputPatients, "224250-proj2-att-ScheduleSimInput.xlsx")
# save simulations
write_xlsx(InputPatients, "224250-proj2-att-PatientSimInput.xlsx")
write_xlsx(InputSchedule, "224250-proj2-att-ScheduleSimInput.xlsx")
setwd("~/Master/NHH/2_Courses/BAN403/BAN403-Project2/Other Support Files")
# save simulations
write_xlsx(InputPatients, "224250-proj2-att-PatientSimInput.xlsx")
write_xlsx(InputSchedule, "224250-proj2-att-ScheduleSimInput.xlsx")
output <- read.table("MultipleRuns_V7.dat", header = TRUE)
?read.table
output <- read.table("MultipleRuns_V7.dat", header = TRUE, na.strings = "")
output <- read.delim("MultipleRuns_V7.dat")
output
View(output)
columns(output)
colnames(output)
cols <- c(
"Scenario",
"Replication"
"CycleTime", "CI_CycleTime",
cols <- c(
"Scenario",
"Replication",
"CycleTime", "CI_CycleTime",
"CycleTimeNew", "CI_CycleTimeNew",
"CycleTimeReturn", "CI_CycleTimeReturn",
"CycleTimeFU", "CI_CycleTimeFU",
"AvgQTimeNR", "CI_AvgQTimeNR",
"AvgQTimeFU", "CI_AvgQTimeFU",
"AvgQTimeDoc", "CI_AvgQTimeDoc",
"DocUtil", "CI_DocUtil",
"PAUtil", "CI_PAUtil",
"CAUtil", "CI_CAUtil",
"Rejected", "CI_Rejected",
"RejectedClosingNR", "CI_RejectedClosingNR",
"RejectedClosingFU", "CI_RejectedClosingFU"
)
colnames(output) <- cols
output <- read.delim("MultipleRuns_V7.dat")
cols <- c(
"Scenario",
"Replication",
"CycleTime", "CI_CycleTime",
"CycleTimeNew", "CI_CycleTimeNew",
"CycleTimeReturn", "CI_CycleTimeReturn",
"CycleTimeFU", "CI_CycleTimeFU",
"AvgQTimeNR", "CI_AvgQTimeNR",
"AvgQTimeFU", "CI_AvgQTimeFU",
"AvgQTimeDoc", "CI_AvgQTimeDoc",
"DocUtil", "CI_DocUtil",
"PAUtil", "CI_PAUtil",
"CAUtil", "CI_CAUtil",
"Rejected", "CI_Rejected",
"RejectedClosingNR", "CI_RejectedClosingNR",
"RejectedClosingFU", "CI_RejectedClosingFU"
)
colnames(output) <- cols
output %>%
filter(!is.na(Replication)) %>%
group_by(Scenario) %>%
summarise(mean_CT = mean(CycleTime))
test <- output %>%
filter(!is.na(Replication)) %>%
group_by(Scenario) %>%
summarise(mean_CT = mean(CycleTime))
View(test)
output %>%
filter(!is.na(Replication)) %>%
summarise(mean_CT = mean(CycleTime))
output %>%
filter(!is.na(Replication)) %>%
group_by(Scenario) %>%
summarise(mean_CT = mean(CycleTime)) %>%
arrange(mean_CT)
# print the best schedule
df_long %>%
filter(sim = 16)
# print the best schedule
df_long %>%
filter(sim == 16)
# print the best schedule
best_schedule <- df_long %>%
filter(sim == 16)
View(best_schedule)
output_best <- output %>%
select(-starts_with("CI_")) %>%
filter(Scenario == 16)
View(output_best)
test <- output %>%
filter(!is.na(Replication)) %>%
select(-starts_with("CI_")) %>%
group_by(Scenario) %>%
summarise(mean_CT = mean()) %>%
arrange(mean_CT)
test <- output %>%
filter(!is.na(Replication)) %>%
select(-starts_with("CI_")) %>%
group_by(Scenario) %>%
summarise(mean_CT = mean(.)) %>%
arrange(mean_CT)
test <- output %>%
filter(!is.na(Replication)) %>%
select(-starts_with("CI_")) %>%
group_by(Scenario) %>%
summarise_all(mean_CT = mean()) %>%
arrange(mean_CT)
summarise_all(mean
test <- output %>%
test <- output %>%
filter(!is.na(Replication)) %>%
select(-starts_with("CI_")) %>%
group_by(Scenario) %>%
summarise_all(mean)
output_means <- output %>%
filter(!is.na(Replication)) %>%
select(-starts_with("CI_")) %>%
group_by(Scenario) %>%
summarise_all(mean)
library(tidyverse)
output_means
output %>%
filter(!is.na(Replication)) %>%
select(-c(starts_with("CI_"),Replication)) %>%
group_by(Scenario) %>%
summarise_all(mean, na.rm=T)
# All means of all
output_means <- output %>%
filter(!is.na(Replication)) %>%
select(-c(starts_with("CI_"),Replication)) %>%
group_by(Scenario) %>%
summarise_all(mean, na.rm=T)
View(output_means)
1/1.5
